<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on 张超的博客</title>
    <link>https://zhangchao.xyz/categories/C&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on 张超的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 24 Aug 2019 11:54:08 +0800</lastBuildDate>
    
	<atom:link href="https://zhangchao.xyz/categories/C++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode-2. Add Two Numbers（两数相加）C&#43;&#43;实现</title>
      <link>https://zhangchao.xyz/leetcode/num2/</link>
      <pubDate>Sat, 24 Aug 2019 11:54:08 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/leetcode/num2/</guid>
      <description>&lt;p&gt;给出两个 &lt;strong&gt;非空&lt;/strong&gt; 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 &lt;strong&gt;逆序&lt;/strong&gt; 的方式存储的，并且它们的每个节点只能存储 &lt;strong&gt;一位&lt;/strong&gt; 数字。&lt;/p&gt;
&lt;p&gt;如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。&lt;/p&gt;
&lt;p&gt;您可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1. Two Sum（两数之和）C&#43;&#43;实现</title>
      <link>https://zhangchao.xyz/leetcode/num1/</link>
      <pubDate>Sat, 24 Aug 2019 11:52:21 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/leetcode/num1/</guid>
      <description>&lt;p&gt;给定一个整数数组 &lt;code&gt;nums&lt;/code&gt; 和一个目标值 &lt;code&gt;target&lt;/code&gt;，请你在该数组中找出和为目标值的那 &lt;strong&gt;两个&lt;/strong&gt; 整数，并返回他们的数组下标。&lt;/p&gt;
&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>归并排序-C&#43;&#43;代码</title>
      <link>https://zhangchao.xyz/cpp/merge-sort-cpp/</link>
      <pubDate>Sat, 24 Aug 2019 11:38:15 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/cpp/merge-sort-cpp/</guid>
      <description>归并排序C++实现。</description>
    </item>
    
    <item>
      <title>快速排序-C&#43;&#43;代码</title>
      <link>https://zhangchao.xyz/cpp/quick-sort-cpp/</link>
      <pubDate>Sat, 24 Aug 2019 11:34:24 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/cpp/quick-sort-cpp/</guid>
      <description>快速排序C++实现。</description>
    </item>
    
    <item>
      <title>堆排序-C&#43;&#43;代码</title>
      <link>https://zhangchao.xyz/cpp/heap-sort-cpp/</link>
      <pubDate>Sat, 24 Aug 2019 11:33:07 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/cpp/heap-sort-cpp/</guid>
      <description>堆排序C++实现。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;构造函数、析构函数执行顺序详解</title>
      <link>https://zhangchao.xyz/cpp/constructor-destrutor-order/</link>
      <pubDate>Sat, 27 Jul 2019 11:48:17 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/cpp/constructor-destrutor-order/</guid>
      <description>&lt;h2 id=&#34;构造函数执行顺序&#34;&gt;构造函数执行顺序&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;调用虚基类构造函数（如有多个则按虚基类声明顺序从左到右）&lt;/li&gt;
&lt;li&gt;调用基类构造函数（如有多个则按基类声明顺序从左到右）&lt;/li&gt;
&lt;li&gt;设定虚函数表指针值（virtual table pointer）&lt;/li&gt;
&lt;li&gt;执行初始化列表、调用成员变量构造函数（按成员变量声明顺序）&lt;/li&gt;
&lt;li&gt;执行自身构造函数&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>