<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpps on 张超的博客</title>
    <link>https://zhangchao.xyz/cpp/</link>
    <description>Recent content in Cpps on 张超的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 12 Apr 2020 12:00:17 +0800</lastBuildDate>
    
	<atom:link href="https://zhangchao.xyz/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43; auto 类型推导</title>
      <link>https://zhangchao.xyz/cpp/cpp-auto-type-deducing/</link>
      <pubDate>Sun, 12 Apr 2020 12:00:17 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/cpp/cpp-auto-type-deducing/</guid>
      <description>C++ auto 类型推导规则与模板类型推导类似，两者只有一点不一样。 前面说过，模板的声明和使用方式如下： 1 2 3 4 template&amp;lt;typename T&amp;gt; void f(ParamType param); f(expr); auto的使用方式如下： 1 2 3 auto x = 27; const auto cx = x; const auto&amp;amp; rx = x; 在auto进行类型推导的时候，auto相当于模板里的T，变量类型修饰符相当于ParamType，等号右边的部分</description>
    </item>
    
    <item>
      <title>C&#43;&#43;模板类型推导</title>
      <link>https://zhangchao.xyz/cpp/cpp-template-type-deducing/</link>
      <pubDate>Sat, 11 Apr 2020 20:00:17 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/cpp/cpp-template-type-deducing/</guid>
      <description>&lt;p&gt;模板是C++的重要特性，是C++标准模板库的基础。模板可以根据数据类型自动生成代码，大大减少重复代码。模板实例化的时候编译器需要根据具体变量推导数据类型，模板推导出的类型很多时候是显而易见的，有些时候却不太明显，本文详细阐述一下C++模板的类型推导机制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>归并排序-C&#43;&#43;代码</title>
      <link>https://zhangchao.xyz/cpp/merge-sort-cpp/</link>
      <pubDate>Sat, 24 Aug 2019 11:38:15 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/cpp/merge-sort-cpp/</guid>
      <description>归并排序C++实现。</description>
    </item>
    
    <item>
      <title>快速排序-C&#43;&#43;代码</title>
      <link>https://zhangchao.xyz/cpp/quick-sort-cpp/</link>
      <pubDate>Sat, 24 Aug 2019 11:34:24 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/cpp/quick-sort-cpp/</guid>
      <description>快速排序C++实现。</description>
    </item>
    
    <item>
      <title>堆排序-C&#43;&#43;代码</title>
      <link>https://zhangchao.xyz/cpp/heap-sort-cpp/</link>
      <pubDate>Sat, 24 Aug 2019 11:33:07 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/cpp/heap-sort-cpp/</guid>
      <description>堆排序C++实现。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;构造函数、析构函数执行顺序详解</title>
      <link>https://zhangchao.xyz/cpp/constructor-destrutor-order/</link>
      <pubDate>Sat, 27 Jul 2019 11:48:17 +0800</pubDate>
      
      <guid>https://zhangchao.xyz/cpp/constructor-destrutor-order/</guid>
      <description>&lt;h2 id=&#34;构造函数执行顺序&#34;&gt;构造函数执行顺序&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;调用虚基类构造函数（如有多个则按虚基类声明顺序从左到右）&lt;/li&gt;
&lt;li&gt;调用基类构造函数（如有多个则按基类声明顺序从左到右）&lt;/li&gt;
&lt;li&gt;设定虚函数表指针值（virtual table pointer）&lt;/li&gt;
&lt;li&gt;执行初始化列表、调用成员变量构造函数（按成员变量声明顺序）&lt;/li&gt;
&lt;li&gt;执行自身构造函数&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>